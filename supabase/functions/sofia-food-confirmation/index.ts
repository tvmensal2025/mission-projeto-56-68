import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { analysisId, confirmed, userCorrections, userId } = await req.json();
    
    console.log('‚úÖ Sofia Food Confirmation recebida:', { analysisId, confirmed, userCorrections, userId });

    // Verificar se o analysisId √© v√°lido
    if (!analysisId || analysisId === 'undefined' || analysisId._type === 'undefined') {
      console.log('‚ö†Ô∏è analysisId inv√°lido, gerando resposta de fallback');
      
      // Gerar resposta de fallback quando n√£o h√° analysisId v√°lido
      let fallbackResponse = '';
      let fallbackCalories = 0;
      
      if (confirmed) {
        fallbackCalories = 600; // Estimativa padr√£o
        fallbackResponse = `Perfeito! ‚úÖ

üî• Estimativa cal√≥rica: aproximadamente ${fallbackCalories} kcal

Obrigada por confirmar! Continue compartilhando suas refei√ß√µes comigo para an√°lises mais precisas! üòâ‚ú®`;
      } else if (userCorrections?.alimentos) {
        const correctedFoods = userCorrections.alimentos;
        fallbackCalories = Math.max(300, correctedFoods.length * 150);
        fallbackResponse = `Obrigada pelas corre√ß√µes! ‚úÖ

‚úèÔ∏è Anotei: ${correctedFoods.join(', ')}

üî• Estimativa cal√≥rica: aproximadamente ${fallbackCalories} kcal

Isso me ajuda a melhorar! Continue enviando suas refei√ß√µes! ü§ñüí°`;
      } else {
        fallbackResponse = `Obrigada pelo feedback! üòä

Vou ajustar minha an√°lise para ser mais precisa na pr√≥xima vez! Continue enviando suas refei√ß√µes! ‚ú®`;
      }
      
      return new Response(JSON.stringify({
        success: true,
        sofia_response: fallbackResponse,
        estimated_calories: fallbackCalories,
        confirmed: confirmed || !!userCorrections?.alimentos
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Inicializar cliente Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Buscar a an√°lise original
    const { data: originalAnalysis, error: fetchError } = await supabase
      .from('sofia_food_analysis')
      .select('*')
      .eq('id', analysisId)
      .single();

    console.log('üîç Buscando an√°lise:', analysisId, 'Resultado:', originalAnalysis, 'Erro:', fetchError);

    if (!originalAnalysis) {
      console.error('‚ùå An√°lise n√£o encontrada para ID:', analysisId);
      console.log('üìä Verificando √∫ltimas an√°lises na tabela...');
      
      // Verificar √∫ltimas an√°lises para debug
      const { data: lastAnalyses } = await supabase
        .from('sofia_food_analysis')
        .select('id, created_at, user_id')
        .order('created_at', { ascending: false })
        .limit(5);
      
      console.log('üìã √öltimas an√°lises:', lastAnalyses);
      
      throw new Error(`An√°lise n√£o encontrada para ID: ${analysisId}`);
    }

    const userName = originalAnalysis.user_name || 'usu√°rio';
    let sofiaResponse = '';
    let estimatedCalories = 0;

    if (confirmed) {
      // USU√ÅRIO CONFIRMOU - Usar calorias j√° estimadas ou calcular
      const confirmedFoods = originalAnalysis.foods_detected || [];
      
      // Usar estimativa anterior ou calcular baseado nos alimentos
      estimatedCalories = originalAnalysis.total_calories || Math.max(300, confirmedFoods.length * 150 + Math.floor(Math.random() * 150));
      
      // Gerar resposta nutricional detalhada
      const hasLiquids = confirmedFoods.some(food => 
        food.toLowerCase().includes('suco') || 
        food.toLowerCase().includes('√°gua') || 
        food.toLowerCase().includes('ch√°') || 
        food.toLowerCase().includes('caf√©') || 
        food.toLowerCase().includes('leite') ||
        food.toLowerCase().includes('refrigerante') ||
        food.toLowerCase().includes('vitamina')
      );

      // Estimativas nutricionais baseadas nas calorias
      const estimatedCarbs = Math.round(estimatedCalories * 0.5 / 4); // 50% das calorias de carbs
      const estimatedProteins = Math.round(estimatedCalories * 0.25 / 4); // 25% das calorias de prote√≠nas  
      const estimatedFats = Math.round(estimatedCalories * 0.25 / 9); // 25% das calorias de gorduras

      const liquidsList = hasLiquids ? confirmedFoods.filter(food => 
        food.toLowerCase().includes('suco') || 
        food.toLowerCase().includes('√°gua') || 
        food.toLowerCase().includes('ch√°') || 
        food.toLowerCase().includes('caf√©') || 
        food.toLowerCase().includes('leite') ||
        food.toLowerCase().includes('refrigerante') ||
        food.toLowerCase().includes('vitamina')
      ) : [];

      const solidFoods = confirmedFoods.filter(food => !liquidsList.includes(food));

      sofiaResponse = `üçΩÔ∏è Prato identificado: ${solidFoods.join(', ')}${hasLiquids ? `\nüíß L√≠quidos: ${liquidsList.join(', ')}` : ''}

üîç Estimativa nutricional:
‚Ä¢ Carboidratos: ${estimatedCarbs}g  
‚Ä¢ Prote√≠nas: ${estimatedProteins}g  
‚Ä¢ Gorduras: ${estimatedFats}g  
‚Ä¢ Calorias totais: ${Math.round(estimatedCalories)} kcal

üîí Salvo com sucesso. Voc√™ est√° no controle!`;

      // Atualizar an√°lise com confirma√ß√£o
      await supabase
        .from('sofia_food_analysis')
        .update({
          confirmed_by_user: true,
          total_calories: Math.round(estimatedCalories),
          analysis_result: {
            ...originalAnalysis.analysis_result,
            user_confirmed: true,
            confirmation_timestamp: new Date().toISOString(),
            final_calories: Math.round(estimatedCalories)
          },
          updated_at: new Date().toISOString()
        })
        .eq('id', analysisId);

      // Salvar na tabela food_analysis para compatibilidade
      await supabase.from('food_analysis').insert({
        user_id: userId,
        meal_type: originalAnalysis.meal_type || 'refeicao',
        food_items: {
          detected_foods: confirmedFoods,
          image_url: originalAnalysis.image_url,
          confirmed: true
        },
        nutrition_analysis: {
          estimated_calories: Math.round(estimatedCalories),
          confirmed_by_user: true
        },
        sofia_analysis: {
          analysis: sofiaResponse,
          foods: confirmedFoods,
          calories: Math.round(estimatedCalories),
          timestamp: new Date().toISOString()
        },
        created_at: new Date().toISOString()
      });

    } else {
      // USU√ÅRIO N√ÉO CONFIRMOU - Fluxo de corre√ß√£o
      sofiaResponse = `Obrigada pelo feedback, ${userName}! üìù `;

      if (userCorrections && userCorrections.alimentos) {
        const correctedFoods = userCorrections.alimentos;
        estimatedCalories = Math.max(300, correctedFoods.length * 140 + Math.floor(Math.random() * 200));
        
        // Usar fun√ß√£o SQL para resposta formatada das calorias
        const { data: formattedResponse } = await supabase
          .rpc('format_sofia_calories_response', {
            user_name: userName,
            calories: Math.round(estimatedCalories),
            foods: correctedFoods
          });

        sofiaResponse = formattedResponse || `Perfeito, ${userName}! ‚úÖ

‚úèÔ∏è Anotei suas corre√ß√µes: ${correctedFoods.join(', ')}

üî• Estimativa cal√≥rica corrigida: aproximadamente ${Math.round(estimatedCalories)} kcal

Isso me ajuda muito a melhorar! ü§ñüí° Continue compartilhando suas refei√ß√µes comigo! ‚ú®`;

        // Atualizar com corre√ß√µes
        await supabase
          .from('sofia_food_analysis')
          .update({
            foods_detected: correctedFoods,
            total_calories: Math.round(estimatedCalories),
            confirmed_by_user: true,
            analysis_result: {
              ...originalAnalysis.analysis_result,
              user_corrected: true,
              corrected_foods: correctedFoods,
              correction_timestamp: new Date().toISOString(),
              final_calories: Math.round(estimatedCalories)
            },
            updated_at: new Date().toISOString()
          })
          .eq('id', analysisId);

        // Salvar na tabela food_analysis com corre√ß√µes
        await supabase.from('food_analysis').insert({
          user_id: userId,
          meal_type: originalAnalysis.meal_type || 'refeicao',
          food_items: {
            detected_foods: correctedFoods,
            image_url: originalAnalysis.image_url,
            corrected: true
          },
          nutrition_analysis: {
            estimated_calories: Math.round(estimatedCalories),
            corrected_by_user: true
          },
          sofia_analysis: {
            analysis: sofiaResponse,
            foods: correctedFoods,
            calories: Math.round(estimatedCalories),
            timestamp: new Date().toISOString()
          },
          created_at: new Date().toISOString()
        });

      } else {
        sofiaResponse += `

Vou ajustar minha an√°lise para ser mais precisa na pr√≥xima vez! üéØ

Continue enviando suas refei√ß√µes - estou sempre aprendendo para te ajudar melhor! üòä‚ú®`;
      }
    }

    // Salvar conversa de confirma√ß√£o
    await supabase.from('sofia_conversations').insert({
      user_id: userId,
      user_message: confirmed ? 'Confirmou an√°lise' : 'Fez corre√ß√µes na an√°lise',
      sofia_response: sofiaResponse,
      context_data: {
        type: 'food_confirmation',
        analysis_id: analysisId,
        confirmed: confirmed,
        corrections: userCorrections,
        final_calories: Math.round(estimatedCalories)
      },
      conversation_type: 'confirmation',
      related_analysis_id: analysisId,
      created_at: new Date().toISOString()
    });

    return new Response(JSON.stringify({
      success: true,
      sofia_response: sofiaResponse,
      estimated_calories: Math.round(estimatedCalories),
      confirmed: confirmed || !!userCorrections?.alimentos
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Erro na confirma√ß√£o da Sofia:', error);
    
    return new Response(JSON.stringify({
      success: false,
      message: 'Ops! Tive um problema para processar sua confirma√ß√£o. Tente novamente! üòä',
      error: error.message
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});