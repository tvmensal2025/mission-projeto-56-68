import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://hlrkoyywjpckdotimtik.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI';

const supabase = createClient(supabaseUrl, supabaseKey);

async function aplicarFuncaoJoinChallenge() {
  console.log('üîß Aplicando fun√ß√£o join_challenge no Supabase...\n');

  try {
    // SQL para criar a fun√ß√£o join_challenge
    const sqlFunction = `
      CREATE OR REPLACE FUNCTION public.join_challenge(
        user_uuid UUID,
        challenge_uuid UUID
      )
      RETURNS JSON
      LANGUAGE plpgsql
      SECURITY DEFINER
      AS $$
      DECLARE
        challenge_record RECORD;
        participation_id UUID;
        result JSON;
      BEGIN
        -- Buscar desafio
        SELECT * INTO challenge_record 
        FROM public.challenges 
        WHERE id = challenge_uuid AND is_active = true;
        
        IF NOT FOUND THEN
          RAISE EXCEPTION 'Desafio n√£o encontrado ou inativo';
        END IF;
        
        -- Verificar se j√° participa
        IF EXISTS (
          SELECT 1 FROM public.challenge_participations 
          WHERE user_id = user_uuid AND challenge_id = challenge_uuid
        ) THEN
          RAISE EXCEPTION 'Usu√°rio j√° participa deste desafio';
        END IF;
        
        -- Criar participa√ß√£o
        INSERT INTO public.challenge_participations (
          user_id,
          challenge_id,
          target_value,
          progress,
          started_at
        ) VALUES (
          user_uuid,
          challenge_uuid,
          challenge_record.daily_log_target,
          0,
          NOW()
        ) RETURNING id INTO participation_id;
        
        -- Retornar resultado
        result := JSON_BUILD_OBJECT(
          'participation_id', participation_id,
          'challenge_id', challenge_uuid,
          'user_id', user_uuid,
          'message', 'Participa√ß√£o criada com sucesso'
        );
        
        RETURN result;
      END;
      $$;
    `;

    // Executar a fun√ß√£o SQL
    console.log('1. Executando fun√ß√£o SQL...');
    const { data, error } = await supabase.rpc('exec_sql', { sql: sqlFunction });

    if (error) {
      console.error('‚ùå Erro ao executar SQL:', error);
      
      // Tentar m√©todo alternativo - inser√ß√£o direta
      console.log('\n2. Tentando inser√ß√£o direta na tabela...');
      const { data: testData, error: testError } = await supabase
        .from('challenge_participations')
        .insert({
          user_id: 'c6a29ad1-65b4-4fcb-bfd1-a61b48cb319e',
          challenge_id: '8e5196df-d576-450e-9f8e-78a6be6b83c9',
          target_value: 30,
          progress: 0
        })
        .select();

      if (testError) {
        console.error('‚ùå Erro na inser√ß√£o direta:', testError);
      } else {
        console.log('‚úÖ Inser√ß√£o direta funcionou!');
        console.log('üìä Dados inseridos:', testData);
      }
      
      return;
    }

    console.log('‚úÖ Fun√ß√£o SQL executada com sucesso!');
    console.log('üìä Resultado:', data);

    // Verificar se a fun√ß√£o foi criada
    console.log('\n3. Verificando se a fun√ß√£o foi criada...');
    const { data: functions, error: functionsError } = await supabase
      .from('information_schema.routines')
      .select('routine_name')
      .eq('routine_schema', 'public')
      .eq('routine_name', 'join_challenge');

    if (functionsError) {
      console.error('‚ùå Erro ao verificar fun√ß√µes:', functionsError);
    } else {
      console.log('‚úÖ Fun√ß√£o join_challenge criada com sucesso!');
    }

  } catch (error) {
    console.error('üí• Erro geral:', error);
  }
}

// Executar a aplica√ß√£o da fun√ß√£o
aplicarFuncaoJoinChallenge(); 