import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://hlrkoyywjpckdotimtik.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function integrarBaseRobustaIASofia() {
  console.log('üöÄ INTEGRANDO BASE ROBUSTA COM IA SOFIA');
  console.log('========================================');
  console.log('üõ°Ô∏è ATEN√á√ÉO: IA ATUAL N√ÉO SER√Å AFETADA');
  console.log('‚úÖ Apenas enriquecimento de dados');
  console.log('');

  try {
    // 1. Verificar se a base robusta est√° aplicada
    console.log('1Ô∏è‚É£ Verificando base robusta...');
    const { data: alimentosCompletos, error: error1 } = await supabase
      .from('alimentos_completos')
      .select('id, nome, propriedades_medicinais')
      .limit(5);
    
    if (error1) {
      console.log('‚ùå Base robusta n√£o est√° aplicada:', error1.message);
      console.log('üí° Execute primeiro o SQL da base robusta');
      return;
    }

    console.log('‚úÖ Base robusta encontrada!');
    console.log(`üìä ${alimentosCompletos?.length || 0} alimentos medicinais dispon√≠veis`);

    // 2. Verificar dados nutricionais completos
    console.log('\n2Ô∏è‚É£ Verificando dados nutricionais...');
    const { data: valoresNutricionais, error: error2 } = await supabase
      .from('valores_nutricionais_completos')
      .select('id, alimento_id, calorias, proteina, carboidrato, gordura')
      .limit(5);
    
    if (error2) {
      console.log('‚ùå Dados nutricionais n√£o encontrados:', error2.message);
    } else {
      console.log('‚úÖ Dados nutricionais completos encontrados!');
      console.log(`üìä ${valoresNutricionais?.length || 0} registros nutricionais`);
    }

    // 3. Verificar doen√ßas e condi√ß√µes
    console.log('\n3Ô∏è‚É£ Verificando doen√ßas e condi√ß√µes...');
    const { data: doencas, error: error3 } = await supabase
      .from('doencas_condicoes')
      .select('id, nome, categoria, abordagem_nutricional')
      .limit(5);
    
    if (error3) {
      console.log('‚ùå Doen√ßas n√£o encontradas:', error3.message);
    } else {
      console.log('‚úÖ Doen√ßas e condi√ß√µes encontradas!');
      console.log(`üìä ${doencas?.length || 0} doen√ßas com abordagem nutricional`);
    }

    // 4. Verificar substitui√ß√µes inteligentes
    console.log('\n4Ô∏è‚É£ Verificando substitui√ß√µes inteligentes...');
    const { data: substituicoes, error: error4 } = await supabase
      .from('substituicoes_inteligentes')
      .select('id, motivo_substituicao, beneficio_esperado')
      .limit(5);
    
    if (error4) {
      console.log('‚ùå Substitui√ß√µes n√£o encontradas:', error4.message);
    } else {
      console.log('‚úÖ Substitui√ß√µes inteligentes encontradas!');
      console.log(`üìä ${substituicoes?.length || 0} substitui√ß√µes inteligentes`);
    }

    // 5. Verificar combina√ß√µes terap√™uticas
    console.log('\n5Ô∏è‚É£ Verificando combina√ß√µes terap√™uticas...');
    const { data: combinacoes, error: error5 } = await supabase
      .from('combinacoes_terapeuticas')
      .select('id, nome_combinacao, beneficio_sinergia')
      .limit(5);
    
    if (error5) {
      console.log('‚ùå Combina√ß√µes n√£o encontradas:', error5.message);
    } else {
      console.log('‚úÖ Combina√ß√µes terap√™uticas encontradas!');
      console.log(`üìä ${combinacoes?.length || 0} combina√ß√µes sin√©rgicas`);
    }

    // 6. Verificar princ√≠pios ativos
    console.log('\n6Ô∏è‚É£ Verificando princ√≠pios ativos...');
    const { data: principios, error: error6 } = await supabase
      .from('principios_ativos')
      .select('id, nome, categoria, beneficios_terapeuticos')
      .limit(5);
    
    if (error6) {
      console.log('‚ùå Princ√≠pios ativos n√£o encontrados:', error6.message);
    } else {
      console.log('‚úÖ Princ√≠pios ativos encontrados!');
      console.log(`üìä ${principios?.length || 0} princ√≠pios ativos documentados`);
    }

    console.log('');
    console.log('üìä RESUMO DA INTEGRA√á√ÉO:');
    console.log('=========================');
    console.log('‚úÖ Base robusta est√° pronta para integra√ß√£o!');
    console.log('üõ°Ô∏è IA Sofia atual continua funcionando normalmente');
    console.log('');
    console.log('üéØ PR√ìXIMO PASSO:');
    console.log('1. Criar fun√ß√£o de enriquecimento de dados');
    console.log('2. Modificar IA Sofia para usar base robusta (opcional)');
    console.log('3. Testar funcionalidades avan√ßadas');
    console.log('');
    console.log('üí° ESTRAT√âGIA SEGURA:');
    console.log('- IA atual continua usando tabelas b√°sicas');
    console.log('- Fun√ß√£o auxiliar enriquece com dados medicinais');
    console.log('- Fallback para dados b√°sicos se necess√°rio');
    console.log('- Pode ativar/desativar recursos gradualmente');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar a integra√ß√£o
integrarBaseRobustaIASofia();





