import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://hlrkoyywjpckdotimtik.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI';

const supabase = createClient(supabaseUrl, supabaseKey);

async function verificarDesafiosJejum() {
  console.log('üîç VERIFICANDO DESAFIOS DE JEJUM\n');
  console.log('='.repeat(50));

  const userId = '109a2a65-9e2e-4723-8543-fbbf68bdc085';

  try {
    // 1. BUSCAR TODOS OS DESAFIOS DE JEJUM
    console.log('1. üîç BUSCANDO TODOS OS DESAFIOS DE JEJUM');
    console.log('-'.repeat(40));

    const { data: jejumChallenges, error: challengesError } = await supabase
      .from('challenges')
      .select('*')
      .eq('category', 'jejum')
      .order('created_at', { ascending: false });

    if (challengesError) {
      console.error('‚ùå Erro ao buscar desafios de jejum:', challengesError);
      return;
    }

    console.log(`üìä Total de desafios de jejum encontrados: ${jejumChallenges.length}`);

    if (jejumChallenges.length > 0) {
      console.log('\nüìã Desafios de jejum existentes:');
      jejumChallenges.forEach((challenge, index) => {
        console.log(`\n${index + 1}. ${challenge.title}`);
        console.log(`   ID: ${challenge.id}`);
        console.log(`   Ativo: ${challenge.is_active ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Em grupo: ${challenge.is_group_challenge ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Dificuldade: ${challenge.difficulty}`);
        console.log(`   Pontos: ${challenge.points_reward}`);
        console.log(`   Criado em: ${challenge.created_at}`);
        console.log(`   Descri√ß√£o: ${challenge.description}`);
      });
    } else {
      console.log('‚ùå NENHUM DESAFIO DE JEJUM ENCONTRADO!');
    }

    // 2. VERIFICAR PARTICIPA√á√ïES
    console.log('\n2. üë§ VERIFICANDO PARTICIPA√á√ïES');
    console.log('-'.repeat(40));

    const { data: jejumParticipations, error: participationsError } = await supabase
      .from('challenge_participations')
      .select('*, challenges(*)')
      .eq('user_id', userId)
      .eq('challenges.category', 'jejum');

    if (participationsError) {
      console.error('‚ùå Erro ao buscar participa√ß√µes:', participationsError);
      return;
    }

    console.log(`üìä Total de participa√ß√µes em jejum: ${jejumParticipations.length}`);

    if (jejumParticipations.length > 0) {
      console.log('\nüìã Participa√ß√µes em jejum:');
      jejumParticipations.forEach((participation, index) => {
        const challengeTitle = participation.challenges?.title || 'Desafio n√£o encontrado';
        console.log(`\n${index + 1}. Participa√ß√£o em: ${challengeTitle}`);
        console.log(`   ID da participa√ß√£o: ${participation.id}`);
        console.log(`   Progresso: ${participation.progress}%`);
        console.log(`   Conclu√≠do: ${participation.is_completed ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Iniciado em: ${participation.started_at}`);
        console.log(`   ID do desafio: ${participation.challenge_id}`);
        if (participation.challenges) {
          console.log(`   Desafio ativo: ${participation.challenges.is_active ? '‚úÖ' : '‚ùå'}`);
        } else {
          console.log(`   ‚ö†Ô∏è Desafio n√£o encontrado (pode ter sido exclu√≠do)`);
        }
      });
    } else {
      console.log('‚ùå NENHUMA PARTICIPA√á√ÉO EM JEJUM ENCONTRADA!');
    }

    // 3. DECIDIR A√á√ÉO
    console.log('\n3. üéØ DECIDINDO A√á√ÉO');
    console.log('-'.repeat(40));

    const activeJejumChallenges = jejumChallenges.filter(c => c.is_active);
    const userJejumParticipations = jejumParticipations.filter(p => !p.is_completed);

    console.log(`üìä Desafios ativos de jejum: ${activeJejumChallenges.length}`);
    console.log(`üìä Participa√ß√µes ativas em jejum: ${userJejumParticipations.length}`);

    if (activeJejumChallenges.length === 0) {
      console.log('‚ùå NENHUM DESAFIO ATIVO DE JEJUM!');
      console.log('üí° A√á√ÉO: Criar novo desafio de jejum');
      
      // Criar novo desafio
      const { data: newChallenge, error: createError } = await supabase
        .from('challenges')
        .insert({
          title: 'Jejum Intermitente 16/8',
          description: 'Fa√ßa jejum de 16 horas por dia por uma semana. Jante √†s 20h e s√≥ coma novamente √†s 12h do dia seguinte.',
          category: 'jejum',
          difficulty: 'medio',
          duration_days: 7,
          points_reward: 150,
          badge_icon: '‚è∞',
          badge_name: 'Mestre do Jejum',
          instructions: 'Fa√ßa jejum de 16 horas por dia. Por exemplo: jante √†s 20h e s√≥ coma novamente √†s 12h do dia seguinte. Beba muita √°gua durante o jejum.',
          tips: ['Beba muita √°gua durante o jejum', 'Mantenha-se ocupado para n√£o pensar na comida', 'Comece gradualmente', 'Escute seu corpo'],
          is_active: true,
          is_featured: false,
          is_group_challenge: false,
          daily_log_target: 16,
          daily_log_unit: 'horas'
        })
        .select()
        .single();

      if (createError) {
        console.error('‚ùå Erro ao criar desafio:', createError);
        return;
      }

      console.log('‚úÖ Novo desafio de jejum criado!');
      console.log(`   T√≠tulo: ${newChallenge.title}`);
      console.log(`   ID: ${newChallenge.id}`);
      console.log(`   Pontos: ${newChallenge.points_reward}`);

      // Criar participa√ß√£o
      const { data: newParticipation, error: participationError } = await supabase
        .from('challenge_participations')
        .insert({
          user_id: userId,
          challenge_id: newChallenge.id,
          target_value: newChallenge.daily_log_target,
          progress: 0,
          started_at: new Date().toISOString()
        })
        .select()
        .single();

      if (participationError) {
        console.error('‚ùå Erro ao criar participa√ß√£o:', participationError);
        return;
      }

      console.log('‚úÖ Participa√ß√£o criada!');
      console.log(`   ID da participa√ß√£o: ${newParticipation.id}`);
      console.log(`   Progresso: ${newParticipation.progress}%`);

    } else if (userJejumParticipations.length === 0) {
      console.log('‚ùå USU√ÅRIO N√ÉO PARTICIPA DE NENHUM DESAFIO ATIVO!');
      console.log('üí° A√á√ÉO: Criar participa√ß√£o no desafio existente');

      const challengeToJoin = activeJejumChallenges[0];
      console.log(`üéØ Criando participa√ß√£o no desafio: ${challengeToJoin.title}`);

      const { data: newParticipation, error: participationError } = await supabase
        .from('challenge_participations')
        .insert({
          user_id: userId,
          challenge_id: challengeToJoin.id,
          target_value: challengeToJoin.daily_log_target || 16,
          progress: 0,
          started_at: new Date().toISOString()
        })
        .select()
        .single();

      if (participationError) {
        if (participationError.code === '23505') {
          console.log('‚ö†Ô∏è Participa√ß√£o j√° existe (erro de chave duplicada)');
        } else {
          console.error('‚ùå Erro ao criar participa√ß√£o:', participationError);
          return;
        }
      } else {
        console.log('‚úÖ Participa√ß√£o criada!');
        console.log(`   ID da participa√ß√£o: ${newParticipation.id}`);
      }

    } else {
      console.log('‚úÖ TUDO OK: Desafio ativo e usu√°rio participando!');
      console.log('üí° A√á√ÉO: Nenhuma a√ß√£o necess√°ria');
    }

    // 4. VERIFICA√á√ÉO FINAL
    console.log('\n4. ‚úÖ VERIFICA√á√ÉO FINAL');
    console.log('-'.repeat(40));

    const { data: finalChallenges } = await supabase
      .from('challenges')
      .select('*')
      .eq('category', 'jejum')
      .eq('is_active', true);

    const { data: finalParticipations } = await supabase
      .from('challenge_participations')
      .select('*, challenges(*)')
      .eq('user_id', userId)
      .eq('challenges.category', 'jejum');

    console.log('üìä Status final:');
    console.log(`   - Desafios ativos de jejum: ${finalChallenges?.length || 0}`);
    console.log(`   - Participa√ß√µes em jejum: ${finalParticipations?.length || 0}`);

    if (finalChallenges && finalChallenges.length > 0) {
      console.log('\nüéØ Desafio(s) ativo(s) de jejum:');
      finalChallenges.forEach((challenge, index) => {
        const participation = finalParticipations?.find(p => p.challenge_id === challenge.id);
        console.log(`   ${index + 1}. ${challenge.title}`);
        console.log(`      Participa√ß√£o: ${participation ? '‚úÖ' : '‚ùå'}`);
        console.log(`      Progresso: ${participation?.progress || 0}%`);
      });
    }

    // 5. INSTRU√á√ïES PARA O USU√ÅRIO
    console.log('\n5. üìã INSTRU√á√ïES PARA O USU√ÅRIO');
    console.log('-'.repeat(40));

    console.log('Para ver o desafio de jejum na interface:');
    console.log('1. Recarregue a p√°gina (Ctrl+F5 ou Cmd+Shift+R)');
    console.log('2. V√° para a se√ß√£o "Desafios Individuais"');
    console.log('3. Procure pelo card do desafio de jejum');
    console.log('4. Clique em "Atualizar Progresso" para testar');

    // 6. RESUMO FINAL
    console.log('\n6. üéØ RESUMO FINAL');
    console.log('-'.repeat(40));

    if (finalChallenges && finalChallenges.length > 0 && finalParticipations && finalParticipations.length > 0) {
      console.log('‚úÖ SISTEMA FUNCIONAL: Desafio de jejum deve aparecer na interface');
      console.log('üéÆ Pr√≥ximos passos:');
      console.log('   1. Recarregar a p√°gina');
      console.log('   2. Verificar se√ß√£o "Desafios Individuais"');
      console.log('   3. Procurar pelo desafio de jejum');
      console.log('   4. Testar funcionalidade de atualiza√ß√£o');
    } else {
      console.log('‚ùå PROBLEMA DETECTADO: Desafio de jejum n√£o est√° funcionando');
      console.log('üîß Verifique os logs acima para mais detalhes');
    }

  } catch (error) {
    console.error('üí• Erro ao verificar desafios de jejum:', error);
  }
}

// Executar verifica√ß√£o
verificarDesafiosJejum(); 