import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY n√£o configurada');
    }

    const { userId, analysisType = 'quinzenal' } = await req.json();

    // Inicializar Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    console.log(`üîÆ Iniciando an√°lise preventiva ${analysisType} para usu√°rio ${userId}`);

    // Calcular per√≠odo de an√°lise
    const now = new Date();
    let startDate: Date;
    let periodDescription: string;

    if (analysisType === 'quinzenal') {
      startDate = new Date(now.getTime() - (15 * 24 * 60 * 60 * 1000)); // 15 dias
      periodDescription = '√∫ltimas 2 semanas';
    } else { // mensal
      startDate = new Date(now.getTime() - (30 * 24 * 60 * 60 * 1000)); // 30 dias
      periodDescription = '√∫ltimo m√™s';
    }

    // Buscar dados de sa√∫de do per√≠odo
    const [
      { data: profile },
      { data: measurements },
      { data: missions },
      { data: healthDiary },
      { data: insights },
      { data: physicalData }
    ] = await Promise.all([
      supabase.from('profiles').select('*').eq('user_id', userId).single(),
      supabase.from('weight_measurements').select('*').eq('user_id', userId)
        .gte('measurement_date', startDate.toISOString().split('T')[0])
        .order('measurement_date', { ascending: true }),
      supabase.from('daily_mission_sessions').select('*').eq('user_id', userId)
        .gte('date', startDate.toISOString().split('T')[0])
        .order('date', { ascending: true }),
      supabase.from('health_diary').select('*').eq('user_id', userId)
        .gte('date', startDate.toISOString().split('T')[0])
        .order('date', { ascending: true }),
      supabase.from('weekly_chat_insights').select('*').eq('user_id', userId)
        .gte('week_start_date', startDate.toISOString().split('T')[0])
        .order('week_start_date', { ascending: true }),
      supabase.from('user_physical_data').select('*').eq('user_id', userId).single()
    ]);

    // Buscar configura√ß√£o de IA para an√°lise preventiva
    const { data: aiConfig } = await supabase
      .from('ai_configurations')
      .select('*')
      .eq('functionality', 'preventive_analysis')
      .single();

    // Preparar dados para an√°lise
    const userName = profile?.full_name || 'Usu√°rio';
    const latestWeight = measurements?.[measurements.length - 1];
    const firstWeight = measurements?.[0];
    const completedMissions = missions?.filter(m => m.is_completed).length || 0;
    const totalMissions = missions?.length || 0;
    const avgMood = healthDiary?.reduce((sum, entry) => sum + (entry.mood_rating || 5), 0) / (healthDiary?.length || 1);
    const avgEnergy = healthDiary?.reduce((sum, entry) => sum + (entry.energy_level || 5), 0) / (healthDiary?.length || 1);
    const exerciseDays = healthDiary?.filter(entry => (entry.exercise_minutes || 0) > 0).length || 0;
    const avgSleep = healthDiary?.reduce((sum, entry) => sum + (entry.sleep_hours || 7), 0) / (healthDiary?.length || 1);
    
    // Calcular tend√™ncias
    const weightTrend = latestWeight && firstWeight ? 
      ((latestWeight.peso_kg - firstWeight.peso_kg) / firstWeight.peso_kg * 100).toFixed(1) : null;
    
    const missionCompliance = totalMissions > 0 ? 
      ((completedMissions / totalMissions) * 100).toFixed(1) : '0';

    // Analisar riscos de sa√∫de
    const healthRisks = [];
    const positivePoints = [];
    const urgentWarnings = [];

    // An√°lise de IMC
    if (latestWeight?.imc) {
      if (latestWeight.imc < 18.5) {
        healthRisks.push('IMC abaixo do normal - poss√≠vel desnutri√ß√£o');
        urgentWarnings.push('ATEN√á√ÉO: Peso muito baixo pode causar defici√™ncias nutricionais graves');
      } else if (latestWeight.imc > 30) {
        healthRisks.push('Obesidade - alto risco cardiovascular');
        urgentWarnings.push('ALERTA: Obesidade aumenta drasticamente o risco de diabetes, hipertens√£o e problemas card√≠acos');
      } else if (latestWeight.imc > 25) {
        healthRisks.push('Sobrepeso - risco cardiovascular moderado');
      } else {
        positivePoints.push('IMC dentro da faixa saud√°vel');
      }
    }

    // An√°lise de tend√™ncia de peso
    if (weightTrend) {
      const trend = parseFloat(weightTrend);
      if (Math.abs(trend) > 5) {
        if (trend > 0) {
          urgentWarnings.push(`ATEN√á√ÉO: Ganho de peso de ${weightTrend}% em ${periodDescription} √© preocupante`);
        } else {
          urgentWarnings.push(`ATEN√á√ÉO: Perda de peso de ${Math.abs(trend)}% em ${periodDescription} pode ser excessiva`);
        }
      }
    }

    // An√°lise de atividade f√≠sica
    if (exerciseDays < 3) {
      healthRisks.push('Sedentarismo - menos de 3 dias de exerc√≠cio por semana');
      if (exerciseDays === 0) {
        urgentWarnings.push('CR√çTICO: Falta total de atividade f√≠sica aumenta risco de doen√ßas em 50%');
      }
    } else if (exerciseDays >= 5) {
      positivePoints.push('Excelente rotina de exerc√≠cios');
    }

    // An√°lise de sono
    if (avgSleep < 6) {
      healthRisks.push('Sono insuficiente cr√¥nico');
      urgentWarnings.push('ALERTA: Menos de 6h de sono aumenta risco de diabetes, depress√£o e morte prematura');
    } else if (avgSleep >= 7 && avgSleep <= 9) {
      positivePoints.push('Qualidade de sono adequada');
    }

    // An√°lise de humor
    if (avgMood < 3) {
      healthRisks.push('Humor constantemente baixo - poss√≠vel depress√£o');
      urgentWarnings.push('ATEN√á√ÉO: Humor persistentemente baixo pode indicar depress√£o cl√≠nica');
    }

    // An√°lise de energia
    if (avgEnergy < 3) {
      healthRisks.push('Fadiga cr√¥nica - poss√≠vel problema de sa√∫de');
    }

    // An√°lise de ades√£o √†s miss√µes
    const compliance = parseFloat(missionCompliance);
    if (compliance < 30) {
      healthRisks.push('Baixa ades√£o ao programa de sa√∫de');
      urgentWarnings.push('CR√çTICO: Baixa ades√£o √†s orienta√ß√µes compromete seriamente os resultados');
    } else if (compliance > 80) {
      positivePoints.push('Excelente comprometimento com o programa');
    }

    // Prompt para Dr. Vital com personalidade m√©dica s√©ria
    const drVitalPrompt = `Voc√™ √© Dr. Vital - M√©dico Especialista em Medicina Preventiva do Instituto dos Sonhos.

PERSONALIDADE: M√©dico experiente, direto, preocupado com a sa√∫de real do paciente. Voc√™ fala a VERDADE sobre os riscos, mesmo que seja desconfort√°vel. Voc√™ tem anos de experi√™ncia vendo as consequ√™ncias de negligenciar a sa√∫de.

DADOS DO PACIENTE (${periodDescription}):
- Nome: ${userName}
- IMC atual: ${latestWeight?.imc || 'N√£o informado'}
- Tend√™ncia de peso: ${weightTrend ? `${weightTrend}%` : 'Sem dados suficientes'}
- Exerc√≠cio: ${exerciseDays} dias em ${periodDescription}
- Sono m√©dio: ${avgSleep.toFixed(1)} horas/noite
- Humor m√©dio: ${avgMood.toFixed(1)}/10
- Energia m√©dia: ${avgEnergy.toFixed(1)}/10
- Ades√£o ao programa: ${missionCompliance}%

RISCOS IDENTIFICADOS:
${healthRisks.map(risk => `- ${risk}`).join('\n')}

PONTOS POSITIVOS:
${positivePoints.map(point => `- ${point}`).join('\n')}

ALERTAS URGENTES:
${urgentWarnings.map(warning => `- ${warning}`).join('\n')}

INSTRU√á√ïES CR√çTICAS:
1. Seja DIRETO sobre os riscos reais √† sa√∫de
2. Use dados cient√≠ficos e estat√≠sticas quando relevante
3. Se houver riscos graves, mencione as consequ√™ncias reais (diabetes, infarto, AVC, etc.)
4. SEMPRE termine direcionando para Rafael ou Sirlene
5. Use tom m√©dico profissional, mas humano
6. Se h√° urg√™ncias, deixe claro que s√£o CR√çTICAS
7. M√°ximo 400 palavras

EXEMPLO DE TOM:
"Com base nos dados analisados, preciso ser franco: sua situa√ß√£o atual apresenta riscos que n√£o podem ser ignorados..."

SEMPRE TERMINE COM:
"Recomendo URGENTEMENTE que agende uma consulta com Rafael ou Sirlene do Instituto dos Sonhos. Eles t√™m a expertise necess√°ria para um plano personalizado que pode literalmente salvar sua vida."

Gere a an√°lise preventiva completa agora:`;

    // Chamar OpenAI API
    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: aiConfig?.model || 'gpt-4o',
        messages: [
          { role: 'system', content: drVitalPrompt },
          { 
            role: 'user', 
            content: `Analise os dados de sa√∫de de ${userName} para o per√≠odo de ${periodDescription} e forne√ßa uma an√°lise preventiva completa.` 
          }
        ],
        max_tokens: aiConfig?.max_tokens || 3000,
        temperature: aiConfig?.temperature || 0.3
      }),
    });

    if (!openAIResponse.ok) {
      throw new Error(`OpenAI API error: ${openAIResponse.statusText}`);
    }

    const openAIData = await openAIResponse.json();
    const drVitalAnalysis = openAIData.choices[0].message.content;

    // Calcular score de risco geral (0-100)
    let riskScore = 0;
    riskScore += healthRisks.length * 15;
    riskScore += urgentWarnings.length * 25;
    riskScore = Math.min(riskScore, 100);

    const riskLevel = riskScore > 75 ? 'CR√çTICO' : 
                     riskScore > 50 ? 'ALTO' : 
                     riskScore > 25 ? 'MODERADO' : 'BAIXO';

    // Salvar an√°lise no banco
    const analysisData = {
      user_id: userId,
      analysis_type: analysisType,
      analysis_date: now.toISOString(),
      period_start: startDate.toISOString(),
      period_end: now.toISOString(),
      dr_vital_analysis: drVitalAnalysis,
      risk_score: riskScore,
      risk_level: riskLevel,
      health_risks: healthRisks,
      positive_points: positivePoints,
      urgent_warnings: urgentWarnings,
      metrics: {
        weight_trend: weightTrend,
        mission_compliance: missionCompliance,
        exercise_days: exerciseDays,
        avg_sleep: avgSleep,
        avg_mood: avgMood,
        avg_energy: avgEnergy,
        measurements_count: measurements?.length || 0
      }
    };

    const { data: savedAnalysis, error: saveError } = await supabase
      .from('preventive_health_analyses')
      .insert(analysisData)
      .select()
      .single();

    if (saveError) {
      console.error('Erro ao salvar an√°lise:', saveError);
      throw saveError;
    }

    console.log(`‚úÖ An√°lise preventiva ${analysisType} gerada para ${userName} - Risco: ${riskLevel}`);

    return new Response(JSON.stringify({
      success: true,
      analysis_id: savedAnalysis.id,
      user_name: userName,
      analysis_type: analysisType,
      risk_level: riskLevel,
      risk_score: riskScore,
      dr_vital_analysis: drVitalAnalysis,
      metrics: analysisData.metrics,
      health_risks: healthRisks,
      positive_points: positivePoints,
      urgent_warnings: urgentWarnings
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Erro na an√°lise preventiva:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'Erro interno do servidor' 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});