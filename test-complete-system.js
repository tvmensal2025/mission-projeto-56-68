import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'http://127.0.0.1:54321';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testCompleteSystem() {
  console.log('üß™ TESTE COMPLETO DO SISTEMA DE SESS√ïES\n');
  
  try {
    // 1. Testar conex√£o
    console.log('1Ô∏è‚É£ Testando conex√£o com Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('sessions')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.log('‚ùå Erro na conex√£o:', testError.message);
      return;
    }
    console.log('‚úÖ Conex√£o estabelecida\n');

    // 2. Limpar dados existentes
    console.log('2Ô∏è‚É£ Limpando dados existentes...');
    await supabase.from('user_sessions').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    await supabase.from('sessions').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    console.log('‚úÖ Dados limpos\n');

    // 3. Testar cria√ß√£o de sess√£o (simulando dados do formul√°rio)
    console.log('3Ô∏è‚É£ Testando cria√ß√£o de sess√£o...');
    const formData = {
      title: 'Sess√£o de Teste Completo',
      description: 'Descri√ß√£o da sess√£o de teste',
      type: 'coaching',
      difficulty: 'intermediate',
      estimated_time: 45,
      content: {
        sections: [
          {
            title: 'Introdu√ß√£o',
            activities: ['Reflex√£o inicial', 'Defini√ß√£o de objetivos'],
            description: 'Prepara√ß√£o para a sess√£o'
          },
          {
            title: 'Desenvolvimento',
            activities: ['Exerc√≠cios pr√°ticos', 'An√°lise de casos'],
            description: 'Parte principal da sess√£o'
          }
        ]
      }
    };

    const sessionData = {
      ...formData,
      target_saboteurs: ['perfeccionista', 'controlador'],
      materials_needed: ['Papel', 'Caneta'],
      follow_up_questions: ['Como voc√™ se sentiu?', 'O que aprendeu?'],
      created_by: '00000000-0000-0000-0000-000000000000'
    };

    console.log('üìù Dados do formul√°rio:', JSON.stringify(formData, null, 2));
    console.log('üíæ Dados para inser√ß√£o:', JSON.stringify(sessionData, null, 2));

    const { data: createdSession, error: createError } = await supabase
      .from('sessions')
      .insert([sessionData])
      .select()
      .single();

    if (createError) {
      console.log('‚ùå Erro ao criar sess√£o:', createError);
      console.log('Detalhes:', {
        message: createError.message,
        details: createError.details,
        hint: createError.hint,
        code: createError.code
      });
      return;
    }
    console.log('‚úÖ Sess√£o criada com ID:', createdSession.id);
    console.log('üìä Dados da sess√£o criada:', JSON.stringify(createdSession, null, 2));

    // 4. Testar busca de sess√µes
    console.log('\n4Ô∏è‚É£ Testando busca de sess√µes...');
    const { data: sessions, error: fetchError } = await supabase
      .from('sessions')
      .select('*')
      .order('created_at', { ascending: false });

    if (fetchError) {
      console.log('‚ùå Erro ao buscar sess√µes:', fetchError.message);
      return;
    }
    console.log('‚úÖ Sess√µes encontradas:', sessions.length);
    console.log('üìã Lista de sess√µes:', sessions.map(s => ({ id: s.id, title: s.title, type: s.type })));

    // 5. Testar cria√ß√£o de user_session
    console.log('\n5Ô∏è‚É£ Testando cria√ß√£o de user_session...');
    const testUserSession = {
      session_id: createdSession.id,
      user_id: '00000000-0000-0000-0000-000000000000',
      status: 'assigned',
      progress: 0,
      due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
    };

    const { data: createdUserSession, error: userSessionError } = await supabase
      .from('user_sessions')
      .insert([testUserSession])
      .select()
      .single();

    if (userSessionError) {
      console.log('‚ùå Erro ao criar user_session:', userSessionError.message);
      return;
    }
    console.log('‚úÖ User session criada com ID:', createdUserSession.id);

    // 6. Testar busca de user_sessions
    console.log('\n6Ô∏è‚É£ Testando busca de user_sessions...');
    const { data: userSessions, error: userSessionsError } = await supabase
      .from('user_sessions')
      .select(`
        *,
        session:sessions(*)
      `)
      .eq('user_id', '00000000-0000-0000-0000-000000000000');

    if (userSessionsError) {
      console.log('‚ùå Erro ao buscar user_sessions:', userSessionsError.message);
      return;
    }
    console.log('‚úÖ User sessions encontradas:', userSessions.length);

    // 7. Testar atualiza√ß√£o de sess√£o
    console.log('\n7Ô∏è‚É£ Testando atualiza√ß√£o de sess√£o...');
    const { data: updatedSession, error: updateError } = await supabase
      .from('sessions')
      .update({ 
        title: 'Sess√£o Atualizada',
        estimated_time: 60 
      })
      .eq('id', createdSession.id)
      .select()
      .single();

    if (updateError) {
      console.log('‚ùå Erro ao atualizar sess√£o:', updateError.message);
      return;
    }
    console.log('‚úÖ Sess√£o atualizada:', updatedSession.title);

    // 8. Testar atualiza√ß√£o de user_session
    console.log('\n8Ô∏è‚É£ Testando atualiza√ß√£o de user_session...');
    const { data: updatedUserSession, error: updateUserError } = await supabase
      .from('user_sessions')
      .update({ 
        status: 'in_progress',
        progress: 50 
      })
      .eq('id', createdUserSession.id)
      .select()
      .single();

    if (updateUserError) {
      console.log('‚ùå Erro ao atualizar user_session:', updateUserError.message);
      return;
    }
    console.log('‚úÖ User session atualizada:', updatedUserSession.status);

    // 9. Limpeza final
    console.log('\n9Ô∏è‚É£ Limpando dados de teste...');
    await supabase.from('user_sessions').delete().eq('id', createdUserSession.id);
    await supabase.from('sessions').delete().eq('id', createdSession.id);
    console.log('‚úÖ Dados de teste removidos');

    console.log('\nüéâ TODOS OS TESTES PASSARAM! SISTEMA 100% FUNCIONAL!');
    console.log('\nüìä RESUMO:');
    console.log('‚úÖ Conex√£o com Supabase');
    console.log('‚úÖ Cria√ß√£o de sess√µes');
    console.log('‚úÖ Busca de sess√µes');
    console.log('‚úÖ Cria√ß√£o de user_sessions');
    console.log('‚úÖ Busca de user_sessions');
    console.log('‚úÖ Atualiza√ß√£o de sess√µes');
    console.log('‚úÖ Atualiza√ß√£o de user_sessions');
    console.log('‚úÖ Limpeza de dados');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

testCompleteSystem(); 