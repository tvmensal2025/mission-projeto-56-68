import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://hlrkoyywjpckdotimtik.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI';

const supabase = createClient(supabaseUrl, supabaseKey);

async function forcarAtualizacaoInterface() {
  console.log('üîÑ For√ßando Atualiza√ß√£o da Interface\n');

  const userId = '109a2a65-9e2e-4723-8543-fbbf68bdc085';

  try {
    // 1. Verificar se o desafio de jejum existe e est√° ativo
    console.log('1. Verificando desafio de jejum no banco...');
    const { data: jejumChallenge, error: jejumError } = await supabase
      .from('challenges')
      .select('*')
      .eq('category', 'jejum')
      .eq('is_active', true)
      .single();

    if (jejumError) {
      console.error('‚ùå Erro ao buscar desafio de jejum:', jejumError);
      return;
    }

    console.log('‚úÖ Desafio de jejum encontrado:');
    console.log(`   T√≠tulo: ${jejumChallenge.title}`);
    console.log(`   ID: ${jejumChallenge.id}`);
    console.log(`   Ativo: ${jejumChallenge.is_active}`);
    console.log(`   Em grupo: ${jejumChallenge.is_group_challenge}\n`);

    // 2. Verificar participa√ß√£o do usu√°rio
    console.log('2. Verificando participa√ß√£o do usu√°rio...');
    const { data: participation, error: participationError } = await supabase
      .from('challenge_participations')
      .select('*')
      .eq('user_id', userId)
      .eq('challenge_id', jejumChallenge.id)
      .single();

    if (participationError) {
      console.error('‚ùå Erro ao buscar participa√ß√£o:', participationError);
      return;
    }

    console.log('‚úÖ Participa√ß√£o encontrada:');
    console.log(`   ID da participa√ß√£o: ${participation.id}`);
    console.log(`   Progresso: ${participation.progress}%`);
    console.log(`   Conclu√≠do: ${participation.is_completed}\n`);

    // 3. For√ßar atualiza√ß√£o do desafio (marcar como inativo e depois ativo novamente)
    console.log('3. For√ßando atualiza√ß√£o do desafio...');
    
    // Primeiro, marcar como inativo
    const { error: deactivateError } = await supabase
      .from('challenges')
      .update({ is_active: false })
      .eq('id', jejumChallenge.id);

    if (deactivateError) {
      console.error('‚ùå Erro ao desativar desafio:', deactivateError);
      return;
    }

    console.log('‚úÖ Desafio marcado como inativo');

    // Aguardar um pouco
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Depois, marcar como ativo novamente
    const { error: activateError } = await supabase
      .from('challenges')
      .update({ is_active: true })
      .eq('id', jejumChallenge.id);

    if (activateError) {
      console.error('‚ùå Erro ao reativar desafio:', activateError);
      return;
    }

    console.log('‚úÖ Desafio reativado\n');

    // 4. Verificar se a atualiza√ß√£o funcionou
    console.log('4. Verificando se a atualiza√ß√£o funcionou...');
    const { data: updatedChallenge, error: checkError } = await supabase
      .from('challenges')
      .select('*')
      .eq('id', jejumChallenge.id)
      .single();

    if (checkError) {
      console.error('‚ùå Erro ao verificar desafio atualizado:', checkError);
      return;
    }

    console.log('‚úÖ Desafio atualizado:');
    console.log(`   T√≠tulo: ${updatedChallenge.title}`);
    console.log(`   Ativo: ${updatedChallenge.is_active}`);
    console.log(`   √öltima atualiza√ß√£o: ${updatedChallenge.updated_at}\n`);

    // 5. Simular busca como a interface faz
    console.log('5. Simulando busca como a interface faz...');
    const { data: activeChallenges, error: activeError } = await supabase
      .from('challenges')
      .select('*')
      .eq('is_active', true)
      .order('created_at', { ascending: false });

    if (activeError) {
      console.error('‚ùå Erro ao buscar desafios ativos:', activeError);
      return;
    }

    console.log(`‚úÖ Desafios ativos encontrados: ${activeChallenges.length}`);

    const jejumInActive = activeChallenges.find(c => c.category === 'jejum');
    if (jejumInActive) {
      console.log('‚úÖ Desafio de jejum est√° nos desafios ativos!');
      console.log(`   T√≠tulo: ${jejumInActive.title}`);
      console.log(`   ID: ${jejumInActive.id}`);
    } else {
      console.log('‚ùå Desafio de jejum N√ÉO est√° nos desafios ativos!');
    }

    // 6. Instru√ß√µes para o usu√°rio
    console.log('\nüéØ INSTRU√á√ïES PARA O USU√ÅRIO:');
    console.log('1. Recarregue a p√°gina da interface (Ctrl+F5 ou Cmd+Shift+R)');
    console.log('2. V√° para a se√ß√£o "Desafios Individuais"');
    console.log('3. Procure pelo card "Jejum 40 horas"');
    console.log('4. Se n√£o aparecer, tente:');
    console.log('   - Limpar o cache do navegador');
    console.log('   - Fechar e abrir o navegador novamente');
    console.log('   - Verificar se h√° erros no console do navegador');

    // 7. Resumo final
    console.log('\nüéØ RESUMO FINAL:');
    console.log(`   - Desafio de jejum existe: ‚úÖ`);
    console.log(`   - Desafio est√° ativo: ${updatedChallenge.is_active ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Usu√°rio participa: ‚úÖ`);
    console.log(`   - Progresso: ${participation.progress}%`);
    console.log(`   - Deve aparecer em: Desafios Individuais`);

    if (updatedChallenge.is_active && jejumInActive) {
      console.log('\n‚úÖ TUDO OK: Desafio de jejum deve aparecer na interface!');
      console.log('üéÆ Ap√≥s recarregar a p√°gina, deve aparecer:');
      console.log('   - Se√ß√£o: Desafios Individuais');
      console.log('   - Card: Jejum 40 horas (com √≠cone Timer)');
      console.log('   - Bot√£o: "Atualizar Progresso"');
      console.log('   - Progresso: 0%');
    } else {
      console.log('\n‚ùå PROBLEMA: Desafio de jejum n√£o est√° sendo carregado!');
      console.log('üí° SOLU√á√ÉO: Recarregar a p√°gina e limpar cache');
    }

  } catch (error) {
    console.error('üí• Erro geral:', error);
  }
}

// Executar o teste
forcarAtualizacaoInterface(); 