import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase REMOTO
const supabaseUrl = 'https://hlrkoyywjpckdotimtik.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verificarSofiaDados() {
  console.log('üîç VERIFICANDO DADOS NUTRICIONAIS DA SOFIA...');

  try {
    // 1. Verificar alimentos
    console.log('\n1. Verificando alimentos...');
    
    const { data: alimentos, error: alimentosError } = await supabase
      .from('alimentos')
      .select('*')
      .order('id');

    if (alimentosError) {
      console.log('‚ùå Erro ao consultar alimentos:', alimentosError.message);
    } else {
      console.log(`‚úÖ ${alimentos.length} alimentos encontrados:`);
      alimentos.forEach((alimento, index) => {
        console.log(`   ${index + 1}. ${alimento.nome} (${alimento.categoria})`);
      });
    }

    // 2. Verificar valores nutricionais
    console.log('\n2. Verificando valores nutricionais...');
    
    const { data: valores, error: valoresError } = await supabase
      .from('valores_nutricionais')
      .select('*')
      .order('alimento_id');

    if (valoresError) {
      console.log('‚ùå Erro ao consultar valores nutricionais:', valoresError.message);
    } else {
      console.log(`‚úÖ ${valores.length} valores nutricionais encontrados:`);
      valores.forEach((valor, index) => {
        console.log(`   ${index + 1}. Alimento ID ${valor.alimento_id}: ${valor.calorias} cal, ${valor.proteina}g prot, ${valor.carboidrato}g carb`);
      });
    }

    // 3. Verificar benef√≠cios por objetivo
    console.log('\n3. Verificando benef√≠cios por objetivo...');
    
    const { data: beneficios, error: beneficiosError } = await supabase
      .from('beneficios_objetivo')
      .select('*')
      .order('alimento_id');

    if (beneficiosError) {
      console.log('‚ùå Erro ao consultar benef√≠cios:', beneficiosError.message);
    } else {
      console.log(`‚úÖ ${beneficios.length} benef√≠cios encontrados:`);
      beneficios.forEach((beneficio, index) => {
        console.log(`   ${index + 1}. ${beneficio.objetivo}: ${beneficio.beneficio} (Intensidade: ${beneficio.intensidade})`);
      });
    }

    // 4. Verificar contraindica√ß√µes
    console.log('\n4. Verificando contraindica√ß√µes...');
    
    const { data: contraindicacoes, error: contraindicacoesError } = await supabase
      .from('contraindicacoes')
      .select('*')
      .order('alimento_id');

    if (contraindicacoesError) {
      console.log('‚ùå Erro ao consultar contraindica√ß√µes:', contraindicacoesError.message);
    } else {
      console.log(`‚úÖ ${contraindicacoes.length} contraindica√ß√µes encontradas:`);
      contraindicacoes.forEach((contra, index) => {
        console.log(`   ${index + 1}. ${contra.tipo}: ${contra.descricao} (Severidade: ${contra.severidade})`);
      });
    }

    // 5. Verificar combina√ß√µes ideais
    console.log('\n5. Verificando combina√ß√µes ideais...');
    
    const { data: combinacoes, error: combinacoesError } = await supabase
      .from('combinacoes_ideais')
      .select('*')
      .order('id');

    if (combinacoesError) {
      console.log('‚ùå Erro ao consultar combina√ß√µes:', combinacoesError.message);
    } else {
      console.log(`‚úÖ ${combinacoes.length} combina√ß√µes encontradas:`);
      combinacoes.forEach((combinacao, index) => {
        console.log(`   ${index + 1}. ${combinacao.nome_combinacao}: ${combinacao.beneficio} (Intensidade: ${combinacao.intensidade})`);
      });
    }

    // 6. Verificar substitui√ß√µes
    console.log('\n6. Verificando substitui√ß√µes...');
    
    const { data: substituicoes, error: substituicoesError } = await supabase
      .from('substituicoes')
      .select('*')
      .order('id');

    if (substituicoesError) {
      console.log('‚ùå Erro ao consultar substitui√ß√µes:', substituicoesError.message);
    } else {
      console.log(`‚úÖ ${substituicoes.length} substitui√ß√µes encontradas:`);
      substituicoes.forEach((substituicao, index) => {
        console.log(`   ${index + 1}. Motivo: ${substituicao.motivo} (Similaridade: ${substituicao.similaridade})`);
      });
    }

    // 7. Verificar preparo e conserva√ß√£o
    console.log('\n7. Verificando preparo e conserva√ß√£o...');
    
    const { data: preparos, error: preparosError } = await supabase
      .from('preparo_conservacao')
      .select('*')
      .order('alimento_id');

    if (preparosError) {
      console.log('‚ùå Erro ao consultar preparos:', preparosError.message);
    } else {
      console.log(`‚úÖ ${preparos.length} m√©todos de preparo encontrados:`);
      preparos.forEach((preparo, index) => {
        console.log(`   ${index + 1}. M√©todo: ${preparo.metodo_preparo} (Tempo: ${preparo.tempo_cozimento}min, Conserva√ß√£o: ${preparo.conservacao})`);
      });
    }

    // 8. Resumo final
    console.log('\nüìä RESUMO FINAL:');
    console.log(`üçé Alimentos: ${alimentos?.length || 0}`);
    console.log(`üìä Valores nutricionais: ${valores?.length || 0}`);
    console.log(`üéØ Benef√≠cios: ${beneficios?.length || 0}`);
    console.log(`‚ö†Ô∏è Contraindica√ß√µes: ${contraindicacoes?.length || 0}`);
    console.log(`üîó Combina√ß√µes: ${combinacoes?.length || 0}`);
    console.log(`üîÑ Substitui√ß√µes: ${substituicoes?.length || 0}`);
    console.log(`üë®‚Äçüç≥ Preparos: ${preparos?.length || 0}`);

    const totalDados = (alimentos?.length || 0) + (valores?.length || 0) + (beneficios?.length || 0) + 
                      (contraindicacoes?.length || 0) + (combinacoes?.length || 0) + 
                      (substituicoes?.length || 0) + (preparos?.length || 0);

    console.log(`\nüéâ TOTAL DE DADOS NUTRICIONAIS: ${totalDados}`);

    if (totalDados > 0) {
      console.log('\n‚úÖ SUCESSO: Base de dados nutricional da SOFIA est√° funcionando!');
      console.log('üì± Agora teste no dashboard: http://localhost:8081/dashboard');
    } else {
      console.log('\n‚ùå ATEN√á√ÉO: Nenhum dado nutricional encontrado!');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar verifica√ß√£o
verificarSofiaDados(); 