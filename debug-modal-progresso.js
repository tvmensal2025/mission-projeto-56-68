import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://hlrkoyywjpckdotimtik.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhscmtveXl3anBja2RvdGltdGlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxNTMwNDcsImV4cCI6MjA2ODcyOTA0N30.kYEtg1hYG2pmcyIeXRs-vgNIVOD76Yu7KPlyFN0vdUI';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function debugModalProgresso() {
  console.log('üîç Debugando modal de progresso...');
  
  try {
    // 1. Verificar se h√° usu√°rios autenticados
    console.log('1. Verificando sess√£o atual...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ùå Erro ao verificar sess√£o:', sessionError);
    } else if (session) {
      console.log('‚úÖ Usu√°rio autenticado:', session.user.email);
      console.log('üÜî User ID:', session.user.id);
    } else {
      console.log('‚ö†Ô∏è Nenhum usu√°rio autenticado');
    }
    
    // 2. Verificar desafios
    console.log('2. Verificando desafios...');
    const { data: desafios, error: desafiosError } = await supabase
      .from('challenges')
      .select('*')
      .eq('is_active', true)
      .limit(1);

    if (desafiosError) {
      console.error('‚ùå Erro ao buscar desafios:', desafiosError);
      return;
    }

    if (desafios.length === 0) {
      console.log('‚ö†Ô∏è Nenhum desafio encontrado');
      return;
    }

    const desafio = desafios[0];
    console.log(`‚úÖ Desafio encontrado: ${desafio.title}`);
    console.log(`üìä Target: ${desafio.daily_log_target} ${desafio.daily_log_unit}`);
    
    // 3. Verificar participa√ß√µes existentes
    console.log('3. Verificando participa√ß√µes...');
    const { data: participacoes, error: participacoesError } = await supabase
      .from('challenge_participations')
      .select('*')
      .eq('challenge_id', desafio.id)
      .limit(5);
    
    if (participacoesError) {
      console.log('‚ùå Erro ao buscar participa√ß√µes:', participacoesError);
    } else {
      console.log(`‚úÖ Encontradas ${participacoes.length} participa√ß√µes`);
      participacoes.forEach((part, index) => {
        console.log(`   ${index + 1}. User: ${part.user_id} | Progress: ${part.progress} | Completed: ${part.is_completed}`);
      });
    }
    
    // 4. Simular o que o modal faz
    console.log('4. Simulando l√≥gica do modal...');
    
    if (session) {
      // Buscar participa√ß√£o do usu√°rio atual
      const { data: participacao, error: participacaoError } = await supabase
        .from('challenge_participations')
        .select('*')
        .eq('user_id', session.user.id)
        .eq('challenge_id', desafio.id)
        .single();
      
      if (participacaoError) {
        console.log('‚ö†Ô∏è Participa√ß√£o n√£o encontrada para usu√°rio atual');
        console.log('üí° Isso explica o erro no modal!');
        console.log('üîß Solu√ß√£o: O modal precisa criar a participa√ß√£o primeiro');
      } else {
        console.log('‚úÖ Participa√ß√£o encontrada:', participacao.id);
        console.log(`üìä Progresso atual: ${participacao.progress}`);
        console.log(`‚úÖ Completo: ${participacao.is_completed}`);
      }
    } else {
      console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado - n√£o √© poss√≠vel testar participa√ß√£o');
    }
    
    console.log('\nüéØ DIAGN√ìSTICO:');
    console.log('O problema √© que o modal tenta buscar uma participa√ß√£o que n√£o existe.');
    console.log('Quando o usu√°rio clica em "Iniciar Desafio", a participa√ß√£o √© criada,');
    console.log('mas o modal ainda tenta buscar uma participa√ß√£o existente.');
    console.log('\nüîß SOLU√á√ÉO:');
    console.log('O modal deve verificar se a participa√ß√£o existe antes de tentar atualiz√°-la.');
    console.log('Se n√£o existir, deve criar uma nova participa√ß√£o.');
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  }
}

debugModalProgresso(); 